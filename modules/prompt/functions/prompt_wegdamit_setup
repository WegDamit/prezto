# Load dependencies.
pmodload 'helper'

CURRENT_BG='NONE'
# SEGMENT_SEPARATOR='❱'
# SEGMENT_SEPARATOR='►'
# SEGMENT_SEPARATOR='%{%1G%}'
SEGMENT_SEPARATOR=$'\uE0B0'

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg sep
  [[ -z $4 ]] && sep="%{$SEGMENT_SEPARATOR%1G%} "
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 && $2 != 'default' ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    print -n "%{$bg%F{$CURRENT_BG}%}$sep%{$fg%}"
  else
    print -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -nP $3
  # ${#${3}}
}

prompt_segment_bleak() {
    print -n "$SEGMENT_SEPARATOR"
    [[ -n $3 ]] && print -Pn $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}


# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
  local symbols
  symbols=()
  symbols+="%(1?;%{%F{red}%}%1{☠%};%{%F{green}%}%1{✔%})"
  [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}%1{⚡%}"
  symbols+="%(1j;%{%F{cyan}%}%1{⚙%};%f)"

  [[ -n "$symbols" ]] && print -n "$symbols"
  # [[ -n "$symbols" ]] && prompt_segment magenta default "$symbols"
}

function build_prompt {
  local git_prompt
  prompt_status
  #  print -n '%(1?;%{%F{red}%}✘ ;)%(!;%{%F{yellow}%}⚡ ;)%(1j;%{%F{cyan}%}%j⚙ ;)%{%F{blue}%}%n%{%F{red}%}@%{%F{green}%}%M'
  #  print -n '%(1?;%{%F{red}%}%1{☠%};%{%F{green}%}%1{✔%})'
  #  print -n '%2{%(?;%{%F{green}%}✔ ;%{%F{red}%}✘ )%}'
  #  print -n '%(!;%{%F{yellow}%}⚡ ;)'
  #  print -n '%(1j;%{%F{cyan}%}%j⚙ ;)' 1
  prompt_segment blue default '%n' 1
  # prompt_segment red default '@' 1
  # prompt_segment green default '%M' 1

  # prompt_segment blue black '%2~'
  prompt_segment blue black '${_prompt_sorin_pwd}'
  # [[ -n ${git_info:+true} ]] && prompt_segment green black '${git_info:+${(e)git_info[prompt]}}%(!. %B%F{red}#%f%b.)'
  [[ -n ${git_info:+true} ]] && prompt_segment green black '${(e)git_info[prompt]}%(!. %B%F{red}#%f%b.)'

  prompt_end
}

function prompt_sorin_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_sorin_pwd="$MATCH"
    unset MATCH
  else
    _prompt_sorin_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

start_time=$SECONDS
function prompt_wegdamit_preexec {
  start_time=$SECONDS
}

function calc_elapsed_time {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -gt 10 ]]; then
    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
  fi
}

function prompt_wegdamit_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_sorin_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  prompt_sorin_pwd
}

function prompt_wegdamit_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  # add-zsh-hook preexec prompt_wegdamit_preexec
  add-zsh-hook precmd prompt_wegdamit_precmd

  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}%1{♺%}%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'

  # zstyle ':prezto:module:git:info:action' format '! %s'
  # zstyle ':prezto:module:git:info:added' format '✚'
  # zstyle ':prezto:module:git:info:ahead' format '⬆'
  # zstyle ':prezto:module:git:info:behind' format '⬇'
  # zstyle ':prezto:module:git:info:branch' format '⬅ %b'
  # # ⬅←
  # zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  # zstyle ':prezto:module:git:info:deleted' format '✖'
  # zstyle ':prezto:module:git:info:modified' format '✱'
  # zstyle ':prezto:module:git:info:position' format '%p'
  # zstyle ':prezto:module:git:info:renamed' format '➙'
  # zstyle ':prezto:module:git:info:stashed' format 's'
  # zstyle ':prezto:module:git:info:unmerged' format '═'
  # zstyle ':prezto:module:git:info:untracked' format '?'
  # zstyle ':prezto:module:git:info:keys' format \
  #   'prompt' '$(coalesce "%b" "%p" "%c")%s' \
  #   'status' ' %A%B%S%a%d%m%r%U%u' \
  #   'rprompt' '%A%B%S%a%d%m%r%U%u'

  zstyle ':prezto:module:git:info:action' format ':%%B%F{yellow}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{green}✚%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{yellow}⬆%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{yellow}⬇%f%%b'
  # zstyle ':prezto:module:git:info:branch' format ':%F{blue}⬅ %b%f'
  zstyle ':prezto:module:git:info:branch' format '⬅ %b'
  # ⬅←
  zstyle ':prezto:module:git:info:commit' format ':%F{blue}%.7c%f'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{red}✖%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{blue}✱%f%%b'
  # zstyle ':prezto:module:git:info:position' format ':%F{red}%p%f'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{magenta}➜%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{cyan}✭%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{yellow}═%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{white}◼%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'rprompt' '%A%B%S%a%d%m%r%U%u' \
    'prompt' '$(coalesce "%b" "%p" "%c")%s'


  # Define prompts.
  PROMPT='%{%f%b%k%}$(build_prompt) '
  # PROMPT='%{%K{black}%}%{%F{default}%} ✘ %{%K{blue}%F{black}%}%{%F{black}%} ${_prompt_sorin_pwd} %{%k%F{blue}%}%{%f%}'

  # RPROMPT='[%D{%L:%M:%S %p}]'
  RPROMPT='${editor_info[overwrite]}%(?::%F{red}⏎%f)${VIM:+" %B%F{green}V%f%b"}${git_info[rprompt]}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_wegdamit_setup "$@"
